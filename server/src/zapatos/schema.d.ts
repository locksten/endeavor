/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */

  export type TodoType = 'Daily' | 'Habit' | 'Task';
  export namespace every {
    export type TodoType = ['Daily', 'Habit', 'Task'];
  }

  /* --- tables --- */

  /**
   * **Daily**
   * - Table in database
   */
  export namespace Daily {
    export type Table = 'Daily';
    export interface Selectable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Habit**
   * - Table in database
   */
  export namespace Habit {
    export type Table = 'Habit';
    export interface Selectable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - Nullable, no default
      */
      positiveCount: number | null;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - Nullable, no default
      */
      negativeCount: number | null;
    }
    export interface JSONSelectable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - Nullable, no default
      */
      positiveCount: number | null;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - Nullable, no default
      */
      negativeCount: number | null;
    }
    export interface Whereable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - Nullable, no default
      */
      positiveCount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - Nullable, no default
      */
      negativeCount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - Nullable, no default
      */
      positiveCount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - Nullable, no default
      */
      negativeCount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - Nullable, no default
      */
      positiveCount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - Nullable, no default
      */
      negativeCount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Invite**
   * - Table in database
   */
  export namespace Invite {
    export type Table = 'Invite';
    export interface Selectable {
      /**
      * **Invite.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Invite_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Invite.inviterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviterId: number;
      /**
      * **Invite.inviteeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviteeId: number;
      /**
      * **Invite.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **Invite.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Invite_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Invite.inviterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviterId: number;
      /**
      * **Invite.inviteeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviteeId: number;
      /**
      * **Invite.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **Invite.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Invite_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Invite.inviterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviterId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Invite.inviteeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviteeId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Invite.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Invite.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Invite_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Invite.inviterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviterId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Invite.inviteeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviteeId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Invite.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Invite.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Invite_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Invite.inviterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviterId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Invite.inviteeId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      inviteeId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Invite.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Invite_inviterId_inviteeId_key' | 'Invite_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Reward**
   * - Table in database
   */
  export namespace Reward {
    export type Table = 'Reward';
    export interface Selectable {
      /**
      * **Reward.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Reward_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Reward.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Reward.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Reward.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **Reward.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **Reward.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Reward_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Reward.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Reward.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Reward.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price: number;
      /**
      * **Reward.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **Reward.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Reward_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Reward.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Reward.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Reward.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Reward.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Reward.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Reward_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Reward.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Reward.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Reward.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Reward.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Reward.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Reward_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Reward.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Reward.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Reward.price**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Reward.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Reward_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Task**
   * - Table in database
   */
  export namespace Task {
    export type Table = 'Task';
    export interface Selectable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Todo**
   * - Table in database
   */
  export namespace Todo {
    export type Table = 'Todo';
    export interface Selectable {
      /**
      * **Todo.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Todo_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Todo.type**
      * - `TodoType` in database
      * - `NOT NULL`, no default
      */
      type: TodoType;
      /**
      * **Todo.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Todo.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Todo.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number;
      /**
      * **Todo.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **Todo.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Todo_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Todo.type**
      * - `TodoType` in database
      * - `NOT NULL`, no default
      */
      type: TodoType;
      /**
      * **Todo.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Todo.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Todo.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number;
      /**
      * **Todo.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **Todo.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Todo_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Todo.type**
      * - `TodoType` in database
      * - `NOT NULL`, no default
      */
      type?: TodoType | db.Parameter<TodoType> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, TodoType | db.Parameter<TodoType> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Todo.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Todo.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Todo.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Todo.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Todo.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Todo_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Todo.type**
      * - `TodoType` in database
      * - `NOT NULL`, no default
      */
      type: TodoType | db.Parameter<TodoType> | db.SQLFragment;
      /**
      * **Todo.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Todo.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Todo.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Todo.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Todo.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Todo_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Todo.type**
      * - `TodoType` in database
      * - `NOT NULL`, no default
      */
      type?: TodoType | db.Parameter<TodoType> | db.SQLFragment | db.SQLFragment<any, TodoType | db.Parameter<TodoType> | db.SQLFragment>;
      /**
      * **Todo.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Todo.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Todo.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Todo.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Todo_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **TodoDaily**
   * - View in database
   */
  export namespace TodoDaily {
    export type Table = 'TodoDaily';
    export interface Selectable {
      /**
      * **TodoDaily.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id: number | null;
      /**
      * **TodoDaily.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type: TodoType | null;
      /**
      * **TodoDaily.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
      /**
      * **TodoDaily.title**
      * - `text` in database
      * - Nullable, no default
      */
      title: string | null;
      /**
      * **TodoDaily.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty: number | null;
      /**
      * **TodoDaily.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt: Date | null;
      /**
      * **TodoDaily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **TodoDaily.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id: number | null;
      /**
      * **TodoDaily.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type: TodoType | null;
      /**
      * **TodoDaily.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
      /**
      * **TodoDaily.title**
      * - `text` in database
      * - Nullable, no default
      */
      title: string | null;
      /**
      * **TodoDaily.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty: number | null;
      /**
      * **TodoDaily.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt: db.TimestampTzString | null;
      /**
      * **TodoDaily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **TodoDaily.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoDaily.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type?: TodoType | db.Parameter<TodoType> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, TodoType | db.Parameter<TodoType> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoDaily.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoDaily.title**
      * - `text` in database
      * - Nullable, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoDaily.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoDaily.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoDaily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **TodoHabit**
   * - View in database
   */
  export namespace TodoHabit {
    export type Table = 'TodoHabit';
    export interface Selectable {
      /**
      * **TodoHabit.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id: number | null;
      /**
      * **TodoHabit.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type: TodoType | null;
      /**
      * **TodoHabit.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
      /**
      * **TodoHabit.title**
      * - `text` in database
      * - Nullable, no default
      */
      title: string | null;
      /**
      * **TodoHabit.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty: number | null;
      /**
      * **TodoHabit.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt: Date | null;
      /**
      * **TodoHabit.positiveCount**
      * - `int4` in database
      * - Nullable, no default
      */
      positiveCount: number | null;
      /**
      * **TodoHabit.negativeCount**
      * - `int4` in database
      * - Nullable, no default
      */
      negativeCount: number | null;
    }
    export interface JSONSelectable {
      /**
      * **TodoHabit.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id: number | null;
      /**
      * **TodoHabit.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type: TodoType | null;
      /**
      * **TodoHabit.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
      /**
      * **TodoHabit.title**
      * - `text` in database
      * - Nullable, no default
      */
      title: string | null;
      /**
      * **TodoHabit.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty: number | null;
      /**
      * **TodoHabit.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt: db.TimestampTzString | null;
      /**
      * **TodoHabit.positiveCount**
      * - `int4` in database
      * - Nullable, no default
      */
      positiveCount: number | null;
      /**
      * **TodoHabit.negativeCount**
      * - `int4` in database
      * - Nullable, no default
      */
      negativeCount: number | null;
    }
    export interface Whereable {
      /**
      * **TodoHabit.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoHabit.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type?: TodoType | db.Parameter<TodoType> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, TodoType | db.Parameter<TodoType> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoHabit.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoHabit.title**
      * - `text` in database
      * - Nullable, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoHabit.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoHabit.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoHabit.positiveCount**
      * - `int4` in database
      * - Nullable, no default
      */
      positiveCount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoHabit.negativeCount**
      * - `int4` in database
      * - Nullable, no default
      */
      negativeCount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **TodoTask**
   * - View in database
   */
  export namespace TodoTask {
    export type Table = 'TodoTask';
    export interface Selectable {
      /**
      * **TodoTask.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id: number | null;
      /**
      * **TodoTask.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type: TodoType | null;
      /**
      * **TodoTask.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
      /**
      * **TodoTask.title**
      * - `text` in database
      * - Nullable, no default
      */
      title: string | null;
      /**
      * **TodoTask.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty: number | null;
      /**
      * **TodoTask.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt: Date | null;
      /**
      * **TodoTask.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **TodoTask.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id: number | null;
      /**
      * **TodoTask.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type: TodoType | null;
      /**
      * **TodoTask.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
      /**
      * **TodoTask.title**
      * - `text` in database
      * - Nullable, no default
      */
      title: string | null;
      /**
      * **TodoTask.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty: number | null;
      /**
      * **TodoTask.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt: db.TimestampTzString | null;
      /**
      * **TodoTask.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **TodoTask.id**
      * - `int4` in database
      * - Nullable, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoTask.type**
      * - `TodoType` in database
      * - Nullable, no default
      */
      type?: TodoType | db.Parameter<TodoType> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, TodoType | db.Parameter<TodoType> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoTask.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoTask.title**
      * - `text` in database
      * - Nullable, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoTask.difficulty**
      * - `int4` in database
      * - Nullable, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoTask.createdAt**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TodoTask.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **User**
   * - Table in database
   */
  export namespace User {
    export type Table = 'User';
    export interface Selectable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **User.partyLeaderId**
      * - `int4` in database
      * - Nullable, no default
      */
      partyLeaderId: number | null;
      /**
      * **User.gold**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      gold: number;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints: number;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints: number;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy: number;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy: number;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience: number;
    }
    export interface JSONSelectable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **User.partyLeaderId**
      * - `int4` in database
      * - Nullable, no default
      */
      partyLeaderId: number | null;
      /**
      * **User.gold**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      gold: number;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints: number;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints: number;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy: number;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy: number;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience: number;
    }
    export interface Whereable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.partyLeaderId**
      * - `int4` in database
      * - Nullable, no default
      */
      partyLeaderId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.gold**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      gold?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **User.partyLeaderId**
      * - `int4` in database
      * - Nullable, no default
      */
      partyLeaderId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **User.gold**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      gold: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.partyLeaderId**
      * - `int4` in database
      * - Nullable, no default
      */
      partyLeaderId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **User.gold**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      gold?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'User_pkey' | 'User_username_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = Daily.Table | Habit.Table | Invite.Table | Reward.Table | Task.Table | Todo.Table | TodoDaily.Table | TodoHabit.Table | TodoTask.Table | User.Table;
  export type Selectable = Daily.Selectable | Habit.Selectable | Invite.Selectable | Reward.Selectable | Task.Selectable | Todo.Selectable | TodoDaily.Selectable | TodoHabit.Selectable | TodoTask.Selectable | User.Selectable;
  export type JSONSelectable = Daily.JSONSelectable | Habit.JSONSelectable | Invite.JSONSelectable | Reward.JSONSelectable | Task.JSONSelectable | Todo.JSONSelectable | TodoDaily.JSONSelectable | TodoHabit.JSONSelectable | TodoTask.JSONSelectable | User.JSONSelectable;
  export type Whereable = Daily.Whereable | Habit.Whereable | Invite.Whereable | Reward.Whereable | Task.Whereable | Todo.Whereable | TodoDaily.Whereable | TodoHabit.Whereable | TodoTask.Whereable | User.Whereable;
  export type Insertable = Daily.Insertable | Habit.Insertable | Invite.Insertable | Reward.Insertable | Task.Insertable | Todo.Insertable | TodoDaily.Insertable | TodoHabit.Insertable | TodoTask.Insertable | User.Insertable;
  export type Updatable = Daily.Updatable | Habit.Updatable | Invite.Updatable | Reward.Updatable | Task.Updatable | Todo.Updatable | TodoDaily.Updatable | TodoHabit.Updatable | TodoTask.Updatable | User.Updatable;
  export type UniqueIndex = Daily.UniqueIndex | Habit.UniqueIndex | Invite.UniqueIndex | Reward.UniqueIndex | Task.UniqueIndex | Todo.UniqueIndex | TodoDaily.UniqueIndex | TodoHabit.UniqueIndex | TodoTask.UniqueIndex | User.UniqueIndex;
  export type Column = Daily.Column | Habit.Column | Invite.Column | Reward.Column | Task.Column | Todo.Column | TodoDaily.Column | TodoHabit.Column | TodoTask.Column | User.Column;
  export type AllBaseTables = [Daily.Table, Habit.Table, Invite.Table, Reward.Table, Task.Table, Todo.Table, User.Table];
  export type AllForeignTables = [];
  export type AllViews = [TodoDaily.Table, TodoHabit.Table, TodoTask.Table];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [Daily.Table, Habit.Table, Invite.Table, Reward.Table, Task.Table, Todo.Table, TodoDaily.Table, TodoHabit.Table, TodoTask.Table, User.Table];


  export type SelectableForTable<T extends Table> = {
    Daily: Daily.Selectable;
    Habit: Habit.Selectable;
    Invite: Invite.Selectable;
    Reward: Reward.Selectable;
    Task: Task.Selectable;
    Todo: Todo.Selectable;
    TodoDaily: TodoDaily.Selectable;
    TodoHabit: TodoHabit.Selectable;
    TodoTask: TodoTask.Selectable;
    User: User.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    Daily: Daily.JSONSelectable;
    Habit: Habit.JSONSelectable;
    Invite: Invite.JSONSelectable;
    Reward: Reward.JSONSelectable;
    Task: Task.JSONSelectable;
    Todo: Todo.JSONSelectable;
    TodoDaily: TodoDaily.JSONSelectable;
    TodoHabit: TodoHabit.JSONSelectable;
    TodoTask: TodoTask.JSONSelectable;
    User: User.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    Daily: Daily.Whereable;
    Habit: Habit.Whereable;
    Invite: Invite.Whereable;
    Reward: Reward.Whereable;
    Task: Task.Whereable;
    Todo: Todo.Whereable;
    TodoDaily: TodoDaily.Whereable;
    TodoHabit: TodoHabit.Whereable;
    TodoTask: TodoTask.Whereable;
    User: User.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    Daily: Daily.Insertable;
    Habit: Habit.Insertable;
    Invite: Invite.Insertable;
    Reward: Reward.Insertable;
    Task: Task.Insertable;
    Todo: Todo.Insertable;
    TodoDaily: TodoDaily.Insertable;
    TodoHabit: TodoHabit.Insertable;
    TodoTask: TodoTask.Insertable;
    User: User.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    Daily: Daily.Updatable;
    Habit: Habit.Updatable;
    Invite: Invite.Updatable;
    Reward: Reward.Updatable;
    Task: Task.Updatable;
    Todo: Todo.Updatable;
    TodoDaily: TodoDaily.Updatable;
    TodoHabit: TodoHabit.Updatable;
    TodoTask: TodoTask.Updatable;
    User: User.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    Daily: Daily.UniqueIndex;
    Habit: Habit.UniqueIndex;
    Invite: Invite.UniqueIndex;
    Reward: Reward.UniqueIndex;
    Task: Task.UniqueIndex;
    Todo: Todo.UniqueIndex;
    TodoDaily: TodoDaily.UniqueIndex;
    TodoHabit: TodoHabit.UniqueIndex;
    TodoTask: TodoTask.UniqueIndex;
    User: User.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    Daily: Daily.Column;
    Habit: Habit.Column;
    Invite: Invite.Column;
    Reward: Reward.Column;
    Task: Task.Column;
    Todo: Todo.Column;
    TodoDaily: TodoDaily.Column;
    TodoHabit: TodoHabit.Column;
    TodoTask: TodoTask.Column;
    User: User.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    Daily: Daily.SQL;
    Habit: Habit.SQL;
    Invite: Invite.SQL;
    Reward: Reward.SQL;
    Task: Task.SQL;
    Todo: Todo.SQL;
    TodoDaily: TodoDaily.SQL;
    TodoHabit: TodoHabit.SQL;
    TodoTask: TodoTask.SQL;
    User: User.SQL;
  }[T];

}
