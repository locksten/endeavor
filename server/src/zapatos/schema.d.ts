/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **Daily**
   * - Table in database
   */
  export namespace Daily {
    export type Table = 'Daily';
    export interface Selectable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Daily_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Daily.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Daily.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Daily.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate: Date | null;
      /**
      * **Daily.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Daily_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Daily.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Daily.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Daily.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate: db.TimestampTzString | null;
      /**
      * **Daily.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Daily_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Daily.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Daily.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Daily.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Daily.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Daily_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Daily.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Daily.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Daily.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Daily.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Daily.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Daily_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Daily.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Daily.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Daily.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Daily.lastCompletionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      lastCompletionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Daily.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Daily_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Habit**
   * - Table in database
   */
  export namespace Habit {
    export type Table = 'Habit';
    export interface Selectable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Habit_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Habit.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Habit.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Habit.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      positiveCount: number;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      negativeCount: number;
      /**
      * **Habit.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Habit_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Habit.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Habit.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Habit.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      positiveCount: number;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      negativeCount: number;
      /**
      * **Habit.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Habit_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Habit.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Habit.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Habit.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      positiveCount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      negativeCount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Habit.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Habit_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Habit.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Habit.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Habit.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      positiveCount?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      negativeCount?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Habit.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Habit.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Habit_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Habit.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Habit.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Habit.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Habit.positiveCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      positiveCount?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Habit.negativeCount**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      negativeCount?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Habit.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Habit_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Task**
   * - Table in database
   */
  export namespace Task {
    export type Table = 'Task';
    export interface Selectable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Task_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Task.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Task.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate: Date | null;
      /**
      * **Task.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number;
      /**
      * **Task.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Task_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Task.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number;
      /**
      * **Task.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate: db.TimestampTzString | null;
      /**
      * **Task.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number;
      /**
      * **Task.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Task_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Task.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Task.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Task.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Task.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Task_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Task.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Task.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **Task.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Task.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Task.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Task_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Task.userId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Task.title**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **Task.completionDate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completionDate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **Task.difficulty**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      difficulty?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Task.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'Task_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **User**
   * - Table in database
   */
  export namespace User {
    export type Table = 'User';
    export interface Selectable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: Date;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints: number;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints: number;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy: number;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy: number;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience: number;
    }
    export interface JSONSelectable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt: db.TimestampTzString;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints: number;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints: number;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy: number;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy: number;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience: number;
    }
    export interface Whereable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **User.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"User_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **User.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **User.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **User.hitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      hitpoints?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.maxHitpoints**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxHitpoints?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.energy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      energy?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.maxEnergy**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      maxEnergy?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **User.experience**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      experience?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'User_pkey' | 'User_username_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = Daily.Table | Habit.Table | Task.Table | User.Table;
  export type Selectable = Daily.Selectable | Habit.Selectable | Task.Selectable | User.Selectable;
  export type JSONSelectable = Daily.JSONSelectable | Habit.JSONSelectable | Task.JSONSelectable | User.JSONSelectable;
  export type Whereable = Daily.Whereable | Habit.Whereable | Task.Whereable | User.Whereable;
  export type Insertable = Daily.Insertable | Habit.Insertable | Task.Insertable | User.Insertable;
  export type Updatable = Daily.Updatable | Habit.Updatable | Task.Updatable | User.Updatable;
  export type UniqueIndex = Daily.UniqueIndex | Habit.UniqueIndex | Task.UniqueIndex | User.UniqueIndex;
  export type Column = Daily.Column | Habit.Column | Task.Column | User.Column;
  export type AllBaseTables = [Daily.Table, Habit.Table, Task.Table, User.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [Daily.Table, Habit.Table, Task.Table, User.Table];


  export type SelectableForTable<T extends Table> = {
    Daily: Daily.Selectable;
    Habit: Habit.Selectable;
    Task: Task.Selectable;
    User: User.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    Daily: Daily.JSONSelectable;
    Habit: Habit.JSONSelectable;
    Task: Task.JSONSelectable;
    User: User.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    Daily: Daily.Whereable;
    Habit: Habit.Whereable;
    Task: Task.Whereable;
    User: User.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    Daily: Daily.Insertable;
    Habit: Habit.Insertable;
    Task: Task.Insertable;
    User: User.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    Daily: Daily.Updatable;
    Habit: Habit.Updatable;
    Task: Task.Updatable;
    User: User.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    Daily: Daily.UniqueIndex;
    Habit: Habit.UniqueIndex;
    Task: Task.UniqueIndex;
    User: User.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    Daily: Daily.Column;
    Habit: Habit.Column;
    Task: Task.Column;
    User: User.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    Daily: Daily.SQL;
    Habit: Habit.SQL;
    Task: Task.SQL;
    User: User.SQL;
  }[T];

}
