type Query {
  RNG: Int!

  me: Me

  userById(id: ID!): User

  userByName(username: String!): User

  userSearch(searchTerm: String!): [User!]!
}

type Me {
  id: ID!

  user: User!
}

type User {
  id: ID!

  _type: String!

  username: String!

  createdAt: Date!
}

scalar Date

type Mutation {
  register(username: String!, password: String!): RegistrationResult!

  login(username: String!, password: String!): LoginResult!
}

union RegistrationResult = SuccessfulLoginResult|FailedRegistrationResult

type SuccessfulLoginResult {
  _type: String!

  user: User!

  authTokens: AuthTokens!
}

type AuthTokens {
  _type: String!

  accessToken: String!
}

type FailedRegistrationResult {
  _type: String!

  reason: String!
}

union LoginResult = SuccessfulLoginResult|FailedLoginResult

type FailedLoginResult {
  _type: String!

  reason: String!
}

schema {
  query: Query
  mutation: Mutation
}
